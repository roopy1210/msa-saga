# 서비스
[서비스 종류]
1. 주문서비스
2. 카드서비스(카드결제)
3. 쿠폰서비스(쿠폰결제)
4. 재고서비스(상품재고관리)

[전체시나리오]
사용자는 아래 주문을 전달한다.

주문내역
주문상품: 라면
주문수량: 10개
주문가격: 개당 1000원
결제내역: 카드(8000원), 쿠폰(2000원)
재고: 총라면 수량 100개

# 주문 처리 순서
1. 재고서비스 호출 하여 재고 차감
2. 쿠폰서비스 호출 하여 쿠폰 차감
3. 카드서비스 호출 하여 카드 결제 처리

# 보상트랜잭션
카드 결제 처리시 오류발생을 가정하고 쿠폰서비스 차감 취소, 재고 차감 처리가 수행 되어야함

# 구현 요청사항
1. 팩키지구조 작성 먼저 할것
2. 각 서비스는 실제로 연동되어져야함
  
# 서비스별 팩키지구조 및 구현소스

1. 주문서비스

# 비즈니스 로직
각 서비스 클라이언트는 RestTemplate으로 작성할것

order-service/
└── src/main/java/com/roopy/order
    ├── OrderApplication.java
    ├── domain/
    │   ├── command/
    │   │   └── CreateOrderCommand.java
    │   ├── event/
    │   │   └── OrderCreatedEvent.java
    │   ├── model/
    │   │   └── OrderAggregate.java
    │   └── saga/
    │       └── OrderSaga.java
    ├── port/
    │   ├── in/
    │   │   └── CreateOrderUseCase.java
    │   └── out/
    │       ├── CardPort.java
    │       ├── CouponPort.java
    │       └── StockPort.java
    ├── adapter/
    │   ├── in/
    │   │   └── web/
    │   │       └── OrderController.java
    │   └── out/
    │       ├── card/
    │       │   └── CardServiceClient.java
    │       ├── coupon/
    │       │   └── CouponServiceClient.java
    │       └── stock/
    │           └── StockServiceClient.java
    └── application/
        └── service/
            └── CreateOrderService.java

----

2. 카드서비스

# 비즈니스로직
외부 카드사 API 연동은 Mock 처리하여 결제 실패 하였다는 로그 출력 및 주문서비스에 결제 실패 전달 필요

card-service/
└── src/main/java/com/roopy/card
    ├── CardApplication.java
    ├── port/
    │   └── in/
    │       └── ProcessCouponPaymentUseCase.java    
    ├── adapter/
    │   └── in/
    │       └── CardController.java   
    └── application/
        └── service/
            └── ProcessCardPaymentService.java

----

3. 쿠폰서비스

# 비즈니스로직
전달받은 쿠폰 결제 금액 만큼 처리 완료 로그 출력

coupon-service/
└── src/main/java/com/roopy/coupon
    ├── CouponApplication.java
    ├── port/
    │   └── in/
    │       └── ProcessCouponPaymentUseCase.java    
    ├── adapter/
    │   └── in/
    │       └── CouponController.java   
    └── application/
        └── service/
            └── ProcessCouponPaymentService.java    

----

4.재고서비스

# 비즈니스로직
전달받은 수량 만큼 차감 완료 로그 출력

stock-service/
└── src/main/java/com/roopy/stock
    ├── StockApplication.java
    ├── port/
    │   └── in/
    │       └── ProcessStockUseCase.java    
    ├── adapter/
    │   └── in/
    │       └── StockController.java   
    └── application/
        └── service/
            └── ProcessStockService.java    


**IMPORTANT**
1. 각서비스별로 팩키지 구조 먼저 작성 후 팩키지에 명시된 소스 코드 구현 할것
2. OrderSaga는 아래 코드 형식으로 보상트랜잭션 구현필요
   [참고코드]
   package com.roopy.payment.domain.saga;

import com.roopy.payment.adapter.out.foreign.ForeignServiceClient;
import com.roopy.payment.domain.command.CancelPaymentCommand;
import com.roopy.payment.domain.event.PaymentCreatedEvent;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.modelling.saga.SagaEventHandler;
import org.axonframework.modelling.saga.StartSaga;
import org.axonframework.spring.stereotype.Saga;

import javax.inject.Inject;

/**
 * 결제 프로세스를 관리하는 SAGA 클래스입니다.
 * <p>
 * 이 클래스는 {@code @Saga} 어노테이션이 적용되어 있으며, Axon Framework에 의해 런타임에 자동으로 관리됩니다.
 * 개발자가 명시적으로 이 클래스를 호출하지 않습니다.
 * <p>
 * <b>작동 순서 요약:</b>
 * <ol>
 *     <li>PaymentAggregate 내부에서 {@code apply(new PaymentCreatedEvent(...))} 호출</li>
 *     <li>Axon이 {@code PaymentCreatedEvent} 이벤트를 발행</li>
 *     <li>Axon이 해당 이벤트를 감지하여 이 SAGA 클래스의 {@code on(PaymentCreatedEvent)} 메서드를 실행</li>
 *     <li>외부 결제 시스템 호출</li>
 *     <li>실패 시 보상 트랜잭션으로 {@code CancelPaymentCommand} 전송</li>
 * </ol>
 */
@Saga
@Slf4j
@RequiredArgsConstructor
public class PaymentSaga {

    /**
     * Axon Framework를 통해 명령을 전송하는 컴포넌트입니다.
     * <p>
     * {@code transient} 키워드는 이 필드가 SAGA 인스턴스 직렬화 시 제외되어야 함을 나타냅니다.
     * <br>
     * Axon은 SAGA 상태를 persistence store (JPA, JDBC 등)에 저장하기 때문에,
     * 직렬화 가능한 필드만 유지되며, 프레임워크가 런타임에 주입합니다.
     */
    @Inject
    private transient CommandGateway commandGateway;

    /**
     * 외부 결제 시스템(foreign-service)과 통신하는 포트입니다.
     * <p>
     * 실제 외부 PG사 호출은 이 포트를 통해 진행되며, 마찬가지로 SAGA 직렬화에서 제외됩니다.
     */
    @Inject
    private transient ForeignServiceClient foreignServiceClient;

    /**
     * 결제 생성 이벤트를 수신하여 SAGA를 시작하는 메서드입니다.
     * <p>
     * {@code @StartSaga}는 이 이벤트가 SAGA를 시작하는 트리거임을 나타냅니다.
     * {@code associationProperty = "paymentId"} 설정으로 이벤트와 SAGA 인스턴스를 연결합니다.
     *
     * @param event 결제 생성 이벤트
     */
    @StartSaga
    @SagaEventHandler(associationProperty = "paymentId")
    public void on(PaymentCreatedEvent event) {
        log.info("[Saga:START] 결제 생성 이벤트 수신 - paymentId={}, amount={}, currency={}",
                event.getPaymentId(), event.getAmount(), event.getCurrency());

        // 외부 결제 시스템 호출
        boolean success = callForeignPayment(event.getPaymentId(), event.getAmount(), event.getCurrency());

        // 결제 실패 시 보상 트랜잭션 실행
        if (!success) {
            log.warn("[Saga:FAIL] 외부 결제 실패 - paymentId={}. 취소 명령 전송 중...", event.getPaymentId());
            commandGateway.send(new CancelPaymentCommand(event.getPaymentId(), "Foreign payment failed"));
        } else {
            log.info("[Saga:SUCCESS] 외부 결제 성공 - paymentId={}", event.getPaymentId());
        }
    }

    /**
     * 외부 결제 시스템을 호출하는 내부 메서드입니다.
     * <p>
     * 실제 구현에서는 외부 API와 비동기 통신을 하며, 현재는 {@code ForeignServiceClient}를 통해 호출됩니다.
     *
     * @param paymentId 결제 ID
     * @param amount    결제 금액
     * @param currency  통화 코드 (예: KRW, USD)
     * @return 외부 결제 성공 여부
     */
    private boolean callForeignPayment(String paymentId, int amount, String currency) {
        log.info("[Saga:CALL] 외부 결제 API 호출 시작 - paymentId={}, amount={}, currency={}",
                paymentId, amount, currency);

        boolean result = foreignServiceClient.requestForeignPayment(paymentId, amount, currency);

        log.info("[Saga:CALL] 외부 결제 API 호출 결과 - paymentId={}, result={}", paymentId, result);
        return result;
    }
}
